name: 'Release'
run-name: "${{ github.event_name == 'release' && format('Release {0}', github.ref_name) || format('Snapshot {0}', github.sha) }}"

on:
  release:
    types: [ created ]
  workflow_dispatch:

env:
  TAURI_BUILD_FLAGS: "${{ github.event_name == 'release' && ' ' || '-d' }}"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-20.04, macos-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules

      - name: Install Required Packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Get Short Commit ID
        id: short-sha
        uses: actions/github-script@v6
        with:
          script: core.setOutput('id', context.sha.substring(0, 7))

      - name: Populate Snapshot Version
        if: github.event_name != 'release'
        run: npm version prerelease --no-git-tag-version --preid "${{steps.short-sha.output.id}}"

      - name: Extract Version
        id: pkg-version
        uses: Saionaro/extract-package-version@v1.2.1

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build the app (Windows)
        if: runner.os == 'Windows'
        run: |
          rustup target add i686-pc-windows-msvc
          npm run build -- --features=vendored-openssl --target x86_64-pc-windows-msvc ${{ env.TAURI_BUILD_FLAGS }}
          npm run build -- --features=vendored-openssl --target i686-pc-windows-msvc ${{ env.TAURI_BUILD_FLAGS }}

      - name: Build the app (Linux)
        if: runner.os == 'Linux'
        run: npm run build -- ${{ env.TAURI_BUILD_FLAGS }}

      - name: Build the app (macOS)
        if: runner.os == 'macOS'
        run: |
          rustup target add aarch64-apple-darwin
          npm run build -- --features=vendored-openssl --target universal-apple-darwin ${{ env.TAURI_BUILD_FLAGS }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-snapshot
          path: |
            src-tauri/target/**/bundle/deb/*.deb
            src-tauri/target/**/bundle/appimage/*.AppImage
            src-tauri/target/**/bundle/msi/*.msi
            src-tauri/target/**/bundle/dmg/*.dmg

      - name: Create Release
        uses: ncipollo/release-action@v1
        if: github.event_name == 'release'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Dev Manager ${{ github.ref_name }}
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: "src-tauri/target/**/bundle/deb/*.deb,\
            src-tauri/target/**/bundle/appimage/*.AppImage,\
            src-tauri/target/**/bundle/msi/*.msi,\
            src-tauri/target/**/bundle/dmg/*.dmg"

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: webosbrew
          SENTRY_PROJECT: dev-manager-desktop-ui
        with:
          environment: production
          sourcemaps: './dist'
          url_prefix: '~/'
          strip_common_prefix: true
          version: ${{ steps.pkg-version.outputs.version }}
